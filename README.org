#+TITLE: compoje - docker swarm templates

Using Docker compose file spec for Docker Swarm deployment lacks some features.
Hence this project.

- Docker swarm assumes a smart client - provides a basic set of features.
 More advanced functionality is expected to be implemented by smart clients.
- Secrets and configurations are immutable. Swarm stack deploy will fail if you redeploy.


** How it works

Considering the call bellow:

#+BEGIN_SRC shell
bb compoje deploy path/to/compoje.yaml
#+END_SRC

The app is going to do the following actions:
- Will read the configuration from file **path/to/compoje.yaml**
- Will build a context from configuration file,
environtment variables and command line argument
- Environment variables and cli args will be merged with context values.
They can overwrite file configuration.
- If any providers are defined, we call them to create files / context data.
We have a provider for Hashicorp Vault - to fetch secrets.
- It reads the stack template file (default **stack.tpl.yml**).
It renders the template with the context that we built above.
We generate a stack for deployment - default: stack.generated.yml
- We call the driver to deploy the stack. Default driver is docker client.
We shell out to docker.

** Features

Docker compose files don't support features that *compoje* tries to solve:

*** Docker configs and Docker secrets that change

Secrets and configs in Docker are immutable.
This makes change management tricky.
*compoje* solves this issue by creating configs and secrets names
that include the content hash in the name.

When you change the file contents the hash will change.
This causes a new config/secret to be added and used in the service.

Periodically, you will have to clean unused configs/secrets.

*** Template values in stack defintions

Docker supports interpolation from environment variables.
This is nice but sometimes not the best option.

*compoje* allows you to use values loaded from files, cli args or other providers.

** Installation and running

*** Using compoje as a babashka task

[[https://babashka.org/][babashka]] is a clojure scripting tool. It's a clojure language interpretor with fast startup.
It's used for scripts and devops tasks.

In your *bb.edn* you should add a dependency to the library and a task, named *compoje* in the file bellow:

#+BEGIN_SRC clojure
;; Type bb tasks to see all tasks
;; Type bb <task-name> or bb run <task-name> to run a task
{:min-bb-version "1.0.0"
 :deps {io.github.ieugen/compoje {:git/sha "..."}}
 :tasks {:requires ([compoje.cli :as cli])
         compoje {:doc "Run compoje."
                  :task (apply cli/main *command-line-args*)}}}
#+END_SRC

Once that is done you can deploy a compoje stack:

#+BEGIN_SRC shell

# display help
bb compoje --help

# Deploy a stack from a file overriding some options
bb compoje deploy --set docker.stack=my-stack example-stacks/nginx/compoje.edn
#+END_SRC

#+BEGIN_SRC shell
Deploy using: docker  stack deploy  --compose-file /home/ieugen/proiecte/clojure/compoje/example-stacks/nginx/stack.generated.yml my-stack
Creating service my-stack_nginx
#+END_SRC

*** Using compoje via clojure deps.edn

If you don't use babashka, you can run *compoje* via clojure deps.

In your *deps.edn* file you should add an alias used to call compoje in your project.

- TODO: write example

** TODOs

Things that need to be done:

*** TODO Implement basic functionality
- [x] Implement render /dry run
- [x] Implement deploy ?!
- [x] Implement passing values via cli
- [x] Implement vault secrets provider
- [ ] Install / run via bbin ?!
- [x] Instruction on how to install and run via bb, clojure, clojure tools
- [ ] Validate configuration, cli args? using spec / malli
- [ ] Implement docker driver via contajners - avoid needing docker client
- [X] Write some documentation and examples - once features are stable
- [x] Implement functions to convert context values -> yaml structure like in helm
- [ ] Implement stack initialization with compoje.edn + other files
- [ ] Support compoje.yaml file
- [ ] Implement file secret provider - similar to ansible-vault in functionality
- [ ] Option to keep secrets after render (remove by default)
- [ ] Attempt to support Compose Specification https://docs.docker.com/compose/compose-file/
